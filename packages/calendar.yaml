# swap in google config later here
sensor:
 - platform: google_travel_time
   api_key: !secret googletravel
   origin: device_tracker.pi_mate9
   destination: sensor.new_cal_location
   options:
     arrival_time: sensor.cal_start_time
     mode: walking
 - platform: google_travel_time
   api_key: !secret googletravel
   origin: device_tracker.pi_mate9
   destination: sensor.new_cal_location
   options:
     arrival_time: sensor.cal_start_time
     mode: driving

 - platform: template
   sensors:
     cal_title:
       value_template: '{{ states.calendar.medicine.attributes.message }}'
       friendly_name: 'Title'
     cal_location:
       value_template: '{{ states.calendar.medicine.attributes.location }}'
       friendly_name: 'Location'
     new_cal_location:
       value_template: '{% if is_state("sensor.cal_location", "None") %}{{ zone.hospital }}{% else %}{{ states.calendar.medicine.attributes.location }}{% endif %}'
       friendly_name: 'Location'
     cal_start_time:
       value_template: '{{ states.calendar.medicine.attributes.start_time }}'
       friendly_name: 'Start Time'
    #  calc_leave_time:
    #    value_template: '{{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.sensor.google_travel_time__walking.attributes.duration.split(" ")[0] | int *60 ) | timestamp_custom("%Y-%m-%d %H:%M") }}'
    #    friendly_name: 'Leave Time for walking'
    #    unit_of_measurement: 'time'
    #  calc_leave_time_driving:
    #    value_template: '{{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.sensor.google_travel_time__driving.attributes.duration.split(" ")[0] | int *60 ) | timestamp_custom("%Y-%m-%d %H:%M") }}'
    #    friendly_name: 'Leave Time for driving'
     calc_leave_time:
       value_template: >
          {% if states('sensor.distance') | float < 3.0 %}
            {{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.sensor.google_travel_time__walking.attributes.duration.split(" ")[0] | int *60 ) | timestamp_custom("%Y-%m-%d %H:%M") }}
          {% else %}
            {{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.sensor.google_travel_time__driving.attributes.duration.split(" ")[0] | int *60 ) | timestamp_custom("%Y-%m-%d %H:%M") }}
          {% endif %}
       friendly_name: 'Leave Time'
     sys_time:
       value_template: '{{ (now().strftime("%s") | int | timestamp_custom("%Y-%m-%d %H:%M")) }}'
       unit_of_measurement: 'time'
    #  wake_up_time:
    #    value_template: '{{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.input_select.getreadytime.state | int *60 - states.sensor.google_travel_time__walking.attributes.duration.split(" ")[0] | int *60 ) | timestamp_custom("%Y-%m-%d %H:%M") }}'
    #    friendly_name: 'Time I will wake you up'
    #  wake_up_time_driving:
    #    value_template: '{{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.input_select.getreadytime.state | int *60 - states.sensor.google_travel_time__driving.attributes.duration.split(" ")[0] | int *60 ) | timestamp_custom("%Y-%m-%d %H:%M") }}'
    #    friendly_name: 'Time I will wake you up for driving'
     wake_up_time:
       value_template: >
          {% if states('sensor.distance') | float < 3.0 %}
            {{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.input_select.getreadytime.state | int *60 - states.sensor.google_travel_time__walking.attributes.duration.split(" ")[0] | int *60 ) | timestamp_custom("%Y-%m-%d %H:%M") }}
          {% else %}
            {{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.input_select.getreadytime.state | int *60 - states.sensor.google_travel_time__driving.attributes.duration.split(" ")[0] | int *60 ) | timestamp_custom("%Y-%m-%d %H:%M") }}
          {% endif %}
       friendly_name: 'Time I will wake you up'
     distance:
       value_template: '{{ states.sensor.google_travel_time__walking.attributes.distance.split(" ")[0] }}'
       friendly_name: 'Distance to Appointment'
       unit_of_measurement: 'km'
     boiler_on_time_from_cal:
       value_template: >
          {% if states('sensor.distance') | float < 3.0 %}
            {{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.input_select.getreadytime.state | int *60 - states.sensor.google_travel_time__walking.attributes.duration.split(" ")[0] | int *60 - states.input_select.boilerontime.state | int *60) | timestamp_custom("%Y-%m-%d %H:%M") }}
          {% else %}
            {{ (as_timestamp(states.calendar.medicine.attributes.start_time) - states.input_select.getreadytime.state | int *60 - states.sensor.google_travel_time__driving.attributes.duration.split(" ")[0] | int *60 - states.input_select.boilerontime.state | int *60) | timestamp_custom("%Y-%m-%d %H:%M") }}
          {% endif %}
       friendly_name: 'Time I will turn the boiler on'


input_boolean:
  announce_time_to_leave:
    name: Announce over kodi
    initial: on
    icon: mdi:speaker-wireless
  display_time_to_leave:
    name: Display with Persistent Notification
    initial: on
    icon: mdi:cards-variant
  set_auto_alarm:
    name: Wake up an hour before you need to leave
    initial: on
    icon: mdi:alarm
  boilerontime:
    name: Turn the boiler on before you wake up
    initial: on
    icon: mdi:radiator

input_select:
  getreadytime:
    name: Time in minutes needed to get ready
    options:
      - 5
      - 15
      - 30
      - 45
      - 60
      - 75
      - 90
      - 120
    initial: '60'
  boilerontime:
    name: Time in minutes before your alarm to turn on the boiler
    options:
      - 0
      - 5
      - 15
      - 30
      - 45
      - 60
      - 75
    initial: '0'
  tempformorningautoalarm:
    name: Temperature to set the boiler from your calendar
    options:
      - 5
      - 15
      - 16
      - 17
      - 18
      - 19
      - 20
      - 21
      - 22
      - 23
      - 24
    initial: 19



automation:
  - alias: 'Announce Calendar Leave time'
    trigger:
      platform: time
      minutes: '/1'
      seconds: 0
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{{ states.sensor.sys_time.state == states.sensor.calc_leave_time.state }}'
        - condition: state
          entity_id: input_boolean.announce_time_to_leave
          state: 'on'
        - condition: state
          entity_id: device_tracker.pi_mate9
          state: home
    action:
      - service: tts.google_say
        data_template:
          entity_id: "media_player.kodi"
          message: 'Excuse me. It is now time to leave for {{ states.calendar.medicine.attributes.message }}  It will take you {{ states.sensor.google_travel_time__driving.attributes.duration }} travel time.'
      - delay: '00:00:{{ states.media_player.kodi.attributes.media_duration | int }}'
      - service: notify.pushbullet
        data:
          title: "Time to leave for {{ states.calendar.medicine.attributes.message }} "
          message: "It will take {{ states.sensor.google_travel_time__driving.attributes.duration }}"

  - alias: 'Display Calendar Leave time'
    trigger:
      platform: time
      minutes: '/1'
      seconds: 0
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{{ states.sensor.sys_time.state == states.sensor.calc_leave_time.state }}'
        - condition: state
          entity_id: input_boolean.display_time_to_leave
          state: 'on'
        - condition: state
          entity_id: device_tracker.pi_mate9
          state: home
    action:
      service: persistent_notification.create
      data:
        message: 'It is now time to leave for {{ states.calendar.medicine.attributes.message }}  It will take you {{ states.sensor.google_travel_time__driving.attributes.duration }} travel time.'
        title: "Calendar Event"

  - alias: wake up from calendar event
    trigger:
      platform: time
      minutes: '/1'
      seconds: 0
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{{ states.sensor.wake_up_time.state == states.sensor.sys_time.state }}'
        - condition: state
          entity_id: input_boolean.set_auto_alarm
          state: 'on'
        - condition: state
          entity_id: device_tracker.pi_mate9
          state: home
        - condition: time
          before: '11:00:00'
          after: '03:00:00'
    action:
      - service: media_player.select_source
        entity_id: media_player.spotify
        data_template:
          source: Sam's Echo Dot
      - service: media_player.play_media
        entity_id: media_player.spotify
        data:
          media_content_type: playlist
          media_content_id: spotify:user:spotify:playlist:37i9dQZF1DX0UrRvztWcAU # spotify:user:samuelabsalom:playlist:61kuO4QryxTOOaj3vKjwDp  # this is my wake up pplaylist from spotify
      - service: homeassistant.turn_on
        entity_id: script.alarm

  - alias: Turn on the boiler before auto alarm
    trigger:
      platform: time
      minutes: '/1'
      seconds: 0
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{{ states.sensor.boiler_on_time.state == states.sensor.sys_time.state }}'
        - condition: state
          entity_id: input_boolean.boilerontime
          state: 'on'
        - condition: state
          entity_id: device_tracker.pi_mate9
          state: home
        - condition: time
          before: '11:00:00'
          after: '03:00:00'
    action:
      - service_template: climate.set_temperature
        data_template:
          temperature: " {{ states.input_select.tempformorningautoalarm.state | int }} "



camera:
 - platform: generic
   name: Destination
   still_image_url: https://maps.googleapis.com/maps/api/staticmap?center={{states.calendar.medicine.attributes.location}}&zoom=17&size=600x300&maptype=roadmap&markers=color:blue
   limit_refetch_to_url_change: true
 - platform: generic
   name: Street View
   still_image_url: !secret googlestreetviewurl  #https://maps.googleapis.com/maps/api/streetview?size=600x300&location={{states.calendar.medicine.attributes.location}}&key=YOURAPIKEYHERE
   limit_refetch_to_url_change: true

script:
  alarm:           ### IFTTT also runs this if i set an alarm manually from Alexa
    sequence:
      - service: notify.pushbullet
        data:
          title: "Wake up you lazy sh**"
          message: "Alexa's alarm has gone off and it is time to get out of bed"
      # - service: tts.picotts_say
      #   entity_id: media_player.bedroom_television
      #   data:
      #     message: Good morning Sam
      - service: homeassistant.turn_on
        entity_id: switch.mirror
      - service: light.turn_on     # http://colrd.com/palette/22735/?download=css            # rgb_color: 246,180,23
        data:
          entity_id: light.bedroom_light
          transition: 15
          rgb_color: [36, 15, 0]
      - delay: 00:00:16
      - service: light.turn_on
        data:
          entity_id: light.bedroom_light
          transition: 15
          rgb_color: [184, 43, 0]
      - delay: 00:00:16
      - service: light.turn_on
        data:
          entity_id: light.bedroom_light
          transition: 15
          rgb_color: [245, 217, 48]
      - delay: 00:00:16
      - service: light.turn_on
        data:
          entity_id: light.bedroom_light
          transition: 15
          rgb_color: [255, 238, 185]
      - delay: 00:00:16
      - service: light.turn_on
        data:
          entity_id: light.bedroom_light
          transition: 15
          rgb_color: [252, 162, 16]

group:
  Calendar:
    view: yes
    icon: mdi:calendar
    entities:
      # - automation.display_calendar_leave_time
      # - automation.announce_calendar_leave_time
      # - automation.wake_up_from_calendar_event
      - group.next_appointment
      - camera.street_view
      - camera.destination
      - input_select.getreadytime
      - input_select.boilerontime
      - input_select.tempformorningautoalarm

      - input_boolean.announce_time_to_leave
      - input_boolean.display_time_to_leave
      - input_boolean.set_auto_alarm
      - input_boolean.boilerontime

  next_appointment:
    view: no
    name: Next Appointment
    entities:
      - sensor.cal_title
      - sensor.cal_location
      - sensor.cal_start_time
      - sensor.calc_leave_time
      - sensor.wake_up_time
      - sensor.boiler_on_time_from_cal
      # - sensor.calc_leave_time_driving
      - sensor.google_travel_time__driving
      - sensor.google_travel_time__walking
      # - sensor.wake_up_time_driving
      # - sensor.actual_wake_up_time
      - sensor.distance
